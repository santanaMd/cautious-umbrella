---
- name: Join Nodes
  hosts: "all"
  vars_files:
    - ../secrets/credentials.yml
    - ../secrets/cluster_values.yml
  vars:
    ansible_become_password: "{{ become_password }}"
  tasks:

    #
    ##
    ### Instalação de dependências
    ##
    #

    - name: Atualizar o cache de pacotes
      become: true
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Ensure required dependencies are installed
      become: true
      ansible.builtin.apt:
        name:
          - curl
          - iproute2
          - nfs-common
        state: present
        update_cache: yes
        cache_valid_time: 3600

    - name: Instalar pacotes necessários k8s
      become: true
      ansible.builtin.apt:
        name:
          - python3-kubernetes
          - python3-openshift
          - python3-yaml
        state: present

    #
    ##
    ### Instalação Kube-Vip
    ##
    #


    # 1. Criação da pasta de manifests

    - name: Criar o diretório /var/lib/rancher/k3s/server/manifests
      ansible.builtin.file:
        path: /var/lib/rancher/k3s/server/manifests
        state: directory
        mode: '0755'
      become: true
      when: inventory_hostname != groups['hybrid'][0]


    # 2. Download manifest RBAC Kube-Vip

    - name: Baixar o arquivo RBAC do Kube-vip
      ansible.builtin.get_url:
        url: https://kube-vip.io/manifests/rbac.yaml
        dest: /var/lib/rancher/k3s/server/manifests/kube-vip-rbac.yaml
        mode: '0644'
      become: true
      when: inventory_hostname != groups['hybrid'][0]


    # 3. Geração do Kube-Vip DaemonSet

    - name: Gerar Kube-Vip DaemonSet
      ansible.builtin.shell: |
        echo "---" >> /var/lib/rancher/k3s/server/manifests/kube-vip-rbac.yaml && \
        docker run --network host --rm ghcr.io/kube-vip/kube-vip:$KVVERSION manifest daemonset \
        --address $VIP \
        --autoInterface \
        --inCluster \
        --taint \
        --controlplane \
        --services \
        --arp \
        --leaderElection \
        >> /var/lib/rancher/k3s/server/manifests/kube-vip-rbac.yaml
      environment:
        KVVERSION: "{{ KUBE_VIP_VERSION }}"
        INTERFACE: "{{ ansible_default_ipv4.interface }}"
        VIP: "{{ VIP_ADDRESS }}"
      when: inventory_hostname != groups['hybrid'][0]
      become: true
      #--interface $INTERFACE \

    #
    ##
    ### Configurara arquivo kubeconfig
    ##
    #

    - name: Criar diretório .kube no diretório home do usuário
      ansible.builtin.file:
        path: /home/{{ ansible_user }}/.kube
        state: directory
        mode: '0755'
      become: true

    - name: Obter o conteúdo do kubeconfig do host de origem
      ansible.builtin.slurp:
        src: /home/{{ ansible_user }}/.kube/config
      register: kubeconfig_content
      when: inventory_hostname == groups['hybrid'][0]

    - name: Configurar conteúdo do kubeconfig como variável global
      ansible.builtin.set_fact:
        global_kubeconfig_content: "{{ kubeconfig_content.content }}"
      when: inventory_hostname == groups['hybrid'][0]
      run_once: true

    - name: Distribuir kubeconfig para outros hosts
      ansible.builtin.copy:
        content: "{{ global_kubeconfig_content | b64decode }}"
        dest: /home/{{ ansible_user }}/.kube/config
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
      become: true
      when: inventory_hostname != groups['hybrid'][0]

    #
    ##
    ### Instalação dos nós restantes
    ##
    #

    - name: Salvar o endereço IP do primeiro servidor
      ansible.builtin.set_fact:
        main_node_ip: "{{ ansible_default_ipv4.address }}"
      when: inventory_hostname == groups['hybrid'][0]
      run_once: true

    - name: Get K3s node token
      ansible.builtin.command:
        cmd: cat /var/lib/rancher/k3s/server/token
      register: k3s_token
      when: inventory_hostname == groups['hybrid'][0]
      become: true

    - name: Set global K3s token variable
      ansible.builtin.set_fact:
        global_k3s_token: "{{ hostvars[groups['hybrid'][0]].k3s_token.stdout }}"
      run_once: true

    - name: Join additional nodes to the cluster
      ansible.builtin.shell: |
        curl -sfL https://get.k3s.io | K3S_TOKEN={{ global_k3s_token }} sh -s - server \
        --server https://{{ main_node_ip }}:6443 \
        --disable servicelb \
        --disable traefik \
        --write-kubeconfig-mode 644 \
        --tls-san={{ VIP_ADDRESS }}
      when: inventory_hostname != groups['hybrid'][0]
      become: true


    #
    ##
    ### Desabilitar k3s-agent
    ##
    #

    - name: Desabilitar k3s-agent
      ansible.builtin.service:
        name: k3s-agent
        enabled: no
        state: stopped
      when: inventory_hostname != groups['hybrid'][0]
      become: true
