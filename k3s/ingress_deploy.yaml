- name: Deploy nginx-ingress
  hosts: "{{ groups['hybrid'][0] }}"
  vars_files:
    - ../secrets/cluster_values.yml
  tasks:

    #
    ##
    ### Adicionar repositório Helm
    ##
    #

    - name: Adicionar o repositório Helm ingress-nginx
      community.kubernetes.helm_repository:
        name: ingress-nginx
        repo_url: https://kubernetes.github.io/ingress-nginx
        state: present
        force_update: true


    #
    ##
    ### Instalar o Ingress nginx
    ##
    #

    - name: Instalar o chart ingress-nginx usando Helm
      community.kubernetes.helm:
        name: ingress-nginx
        chart_ref: ingress-nginx/ingress-nginx
        namespace: ingress-nginx
        create_namespace: true
        release_state: present
        chart_version: "{{ ingress_controloer_chart_version }}"
        values:
          controller:
            service:
              loadBalancerIP: "{{ VIP_ADDRESS }}"
            autoscaling:
              enabled: true
              minReplicas: 3
              maxReplicas: 50
            resources:
              requests:
                cpu: "100m"
                memory: "270Mi"


    #
    ##
    ### Instalar o Ingress Traefik
    ##
    #

    - name: Instalar o chart Traefik Ingress
      community.kubernetes.helm:
        chart_ref: oci://ghcr.io/traefik/helm/traefik
        release_name: ingress-traefik
        namespace: ingress-traefik
        create_namespace: true
        release_state: present
        chart_version: "{{ minio_datalab_chart_version }}"
        values:
          mode: standalone
          tls:
            enabled: true
            autoGenerated: true
          auth:
            rootUser: admin
            rootPassword: "{{ minio_datalab_root_passwd }}"
          service:
            type: LoadBalancer
            ports:
              api: 9000
              console: 9001
            loadBalancerIP: "{{ mongodb_datalab_loadbalancer_ip }}"
          persistence:
            enabled: true
            storageClass: "longhorn"
            accessModes:
              - ReadWriteOnce
            size: 100Gi
          metrics:
            prometheusAuthType: public
            enabled: true
          prometheusRule:
            enabled: true
            namespace: "monitoring"
