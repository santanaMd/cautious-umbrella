---
- name: Docker Install
  hosts: k3s-database
  vars_files:
  - ../values.yaml
  - ../secrets/k3s_database.yaml
  tasks:

    - name: Check if certificate path exists
      ansible.builtin.stat:
        path: "{{ k3s_database.persistence_cert_path }}"
      register: cert_path_status

    - name: Check if certificate path is empty
      ansible.builtin.find:
        paths: "{{ k3s_database.persistence_cert_path }}"
        file_type: any
      register: cert_path_content
      when: cert_path_status.stat.exists

    - name: Include certificate generation tasks
      include_tasks: ../side_tasks/db_cert.deploy_k3s_db.ansible.yaml
      when: not cert_path_status.stat.exists or cert_path_content.matched == 0

    - name: Pull default MySQL Docker image
      docker_image:
        name: "{{ k3s_database.default_image }}"
        source: pull

    - name: Create MySQL Conteiner
      community.docker.docker_container:
        name: "{{ k3s_database.container_name }}"
        image: "{{ k3s_database.default_image }}"
        restart_policy: always
        user: 1234:1234
        state: started
        env:
          MYSQL_USER: "{{ MYSQL_USER }}"
          MYSQL_PASSWORD: "{{ MYSQL_PASSWORD }}"
          MYSQL_DATABASE: "{{ MYSQL_DATABASE }}"
          MYSQL_ROOT_PASSWORD: "{{ MYSQL_ROOT_PASSWORD }}"
        volumes:
          - '{{ k3s_database.persistence_data_path }}:/var/lib/mysql'
          - '{{ k3s_database.persistence_cert_path }}:/etc/mysql/ssl'
        ports:
        - "3306:3306"
        command:
          - --ssl-ca=/etc/mysql/ssl/ca.pem
          - --ssl-cert=/etc/mysql/ssl/server-cert.pem
          - --ssl-key=/etc/mysql/ssl/server-key.pem
          - --bind-address=0.0.0.0