- name: Deploy Media Server
  hosts: "{{ groups['hybrid'][0] }}"
  vars_files:
    - ../secrets/cluster_values.yml
  tasks:

    - name: Verificar se a namespace 'automation' existe
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: automation
      register: ns_result

    - name: Criar a namespace 'automation' se n√£o existir
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: automation
      when: ns_result.resources | length == 0


    - name: Criar Secret para PostgreSQL
      kubernetes.core.k8s:
        state: present
        namespace: automation
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: postgres-automation-secret
          data:
            adminPasswordKey: "{{ postgres_automation_adminPasswordKey | b64encode }}"
            userPasswordKey: "{{ postgres_automation_userPasswordKey | b64encode }}"
            replicationPasswordKey: "{{ postgres_automation_replicationPasswordKey | b64encode }}"

    - name: Instalar o chart postgres usando Helm
      community.kubernetes.helm:
        chart_ref: oci://registry-1.docker.io/bitnamicharts/postgresql
        release_name: automation-postgres
        namespace: automation
        create_namespace: true
        release_state: present
        chart_version: "{{ postgre_datalab_chart_version }}"
        values:
          primary:
            service:
              type: "ClusterIP"
            persistence:
              enabled: true
              storageClass: "longhorn"
              accessModes:
                - ReadWriteOnce
              size: 5Gi
          global:
            postgresql:
              auth:
                existingSecret: "postgres-automation-secret"
                secretKeys:
                  adminPasswordKey: "adminPasswordKey"
                  userPasswordKey: "userPasswordKey"
                  replicationPasswordKey: "replicationPasswordKey"
          metrics:
            enabled: true
            serviceMonitor:
              enabled: true
          tls:
            enabled: false
            autoGenerated: true
            preferServerCiphers: true


    - name: Instalar o chart n8n usando Helm
      community.kubernetes.helm:
        chart_ref: oci://8gears.container-registry.com/library/n8n
        release_name: automation-n8n
        namespace: automation
        create_namespace: true
        release_state: present
        chart_version: "{{ n8n_chart_version }}"
        values:
          generic:
            timezone: "America/Sao_Paulo"
          config:
            database:
              type: postgresdb
              postgresdb:
                host: "automation-postgres-postgresql"
          secret:
            database:
              postgresdb:
                password: "{{ postgres_automation_adminPasswordKey }}"
          persistence:
            enabled: true
            type: dynamic
            storageClassName: "longhorn"
            annotations:
              helm.sh/resource-policy: keep
            accessModes:
              - ReadWriteOnce
            size: 10Gi
          extraEnv:
            WEBHOOK_TUNNEL_URL: "https://n8n.dndelion.io/"
            WEBHOOK_URL: "https://n8n.dndelion.io/"
            N8N_ENCRYPTION_KEY: "a7AK05I5q4dT/fVbTDaFbii9qhhv/YPwhDzBGiPZbiY="

    - name: Criar Ingress para o n8n
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: n8n-ingress
            namespace: automation
            annotations:
              kubernetes.io/ingress.class: "nginx"
              cert-manager.io/cluster-issuer: letsencrypt-prod
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
          spec:
            rules:
              - host: "n8n.{{ domain }}"
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: automation-n8n
                          port:
                            number: 80