- name: Deploy data-labs
  hosts: "{{ groups['hybrid'][0] }}"
  vars_files:
    - ../secrets/cluster_values.yml
  tasks:

    #
    ##
    ### Postgres
    ##
    #

    - name: Criar Secret para PostgreSQL
      kubernetes.core.k8s:
        state: present
        namespace: datalab
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: postgres-secret
          data:
            adminPasswordKey: "{{ postgres_datalab_adminPasswordKey | b64encode }}"
            userPasswordKey: "{{ postgres_datalab_userPasswordKey | b64encode }}"
            replicationPasswordKey: "{{ postgres_datalab_replicationPasswordKey | b64encode }}"

    - name: Instalar o chart postgres usando Helm
      community.kubernetes.helm:
        chart_ref: oci://registry-1.docker.io/bitnamicharts/postgresql
        release_name: datalab-postgres
        namespace: datalab
        create_namespace: true
        release_state: present
        chart_version: "{{ postgre_datalab_chart_version }}"
        values:
          primary:
            service:
              type: "LoadBalancer"
              loadBalancerIP: "{{ postgres_datalab_loadbalancer_ip }}"
            persistence:
              enabled: true
              storageClass: "longhorn"
              accessModes:
                - ReadWriteOnce
              size: 16Gi
          global:
            postgresql:
              auth:
                existingSecret: "postgres-secret"
                secretKeys:
                  adminPasswordKey: "adminPasswordKey"
                  userPasswordKey: "userPasswordKey"
                  replicationPasswordKey: "replicationPasswordKey"
          metrics:
            enabled: true
            serviceMonitor:
              enabled: true
          tls:
            enabled: true
            autoGenerated: true
            preferServerCiphers: true


    #
    ##
    ### MongoDB
    ##
    #

    - name: Instalar o chart Mongo usando Helm
      community.kubernetes.helm:
        chart_ref: oci://registry-1.docker.io/bitnamicharts/mongodb
        release_name: datalab-mongo
        namespace: datalab
        create_namespace: true
        release_state: present
        chart_version: "{{ mongodb_datalab_chart_version }}"
        values:
          global:
            security:
              allowInsecureImages: true
          image:
            registry: docker.io
            repository: arm64v8/mongo
            tag: latest
          architecture: standalone
          tls:
            enabled: false
            mTLS:
              enabled: false
            autoGenerated: true
          service:
            type: "LoadBalancer"
            portName: mongodb
            ports:
              mongodb: 27017
            loadBalancerIP: "{{ mongodb_datalab_loadbalancer_ip }}"
          persistence:
            enabled: true
            mountPath: "/data/db"
            storageClass: "longhorn"
            accessModes:
              - ReadWriteOnce
            size: 40Gi
          metrics:
            enabled: true
          auth:
            enabled: true
            rootUser: root
            rootPassword: "{{ mongodb_datalab_root_passwd }}"


    #
        release_state: present
        chart_version: "{{ minio_datalab_chart_version }}"
        values:
          mode: standalone
          tls:
            enabled: true
            autoGenerated: true
          auth:
            rootUser: admin
            rootPassword: "{{ minio_datalab_root_passwd }}"
          service:
            type: LoadBalancer
            ports:
              api: 9000
              console: 9001
            loadBalancerIP: "{{ minio_datalab_loadbalancer_ip }}"
          persistence:
            enabled: true
            storageClass: "longhorn"
            accessModes:
              - ReadWriteOnce
            size: 60Gi
          metrics:
            prometheusAuthType: public
            enabled: true
          prometheusRule:
            enabled: true
            namespace: "monitoring"

    - name: Criar Ingress para o MinIO Web
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: minio-web
            namespace: datalab
            annotations:
              kubernetes.io/ingress.class: "nginx"
              cert-manager.io/cluster-issuer: letsencrypt-prod
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
          spec:
            rules:
              - host: "minio.{{ domain }}"
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: datalab-minio
                          port:
                            number: 9001
              - host: "minio-api.{{ domain }}"
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: datalab-minio
                          port:
                            number: 9000
            tls:
              - hosts:
                - "minio.{{ domain }}"
                secretName: minio-cert-manager-secret


    #
    ##
    ### Kafka
    ##
    #

    - name: Instalar o chart Kafka usando Helm
      community.kubernetes.helm:
        chart_ref: oci://registry-1.docker.io/bitnamicharts/kafka
        release_name: datalab-kafka
        namespace: datalab
        create_namespace: true
        release_state: present
        chart_version: "{{ kafka_datalab_chart_version }}"
        values:
          kraft:
            enabled: true
          tls:
            type: "PEM"
            autoGenerated: true
          controller:
            persistence:
                enabled: true
                storageClass: "longhorn"
                accessModes:
                  - ReadWriteOnce
                size: 8Gi
                #mountPath: /var/lib/kafka/data
          broker:
            persistence:
              enabled: true
              storageClass: "longhorn"
              accessModes:
                - ReadWriteOnce
              size: 16Gi
          service:
            type: "LoadBalancer"
            loadBalancerIP: "{{ kafka_datalab_loadbalancer_ip }}"
          auth:
            clientProtocol: sasl
            interBrokerProtocol: sasl
            sasl:
              mechanisms: scram-sha-512
              interBrokerMechanism: scram-sha-512
              jaas:
                clientUsers:
                  - admin
                  - n8n_automation
                  - santana_admin
                clientPasswords:
                  - "{{ kafka_datalab_root_passwd }}"
                  - "{{ kafka_datalab_n8n_automation_passwd }}"
                  - "{{ kafka_datalab_santana_admin_passwd }}"

    #
    ##
    ### Neo4j
    ##
    #


    
