#
##
### Adicionar repositório Helm
##
#

- name: Adicionar o repositório Helm jetstack
  community.kubernetes.helm_repository:
    name: jetstack
    repo_url: https://charts.jetstack.io
    state: present
    force_update: true
  run_once: true


#
##
### Instalar o Cert Manager
##
#

- name: Instalar o chart cert-manager usando Helm
  community.kubernetes.helm:
    name: cert-manager
    chart_ref: jetstack/cert-manager
    namespace: cert-manager
    create_namespace: true
    release_state: present
    chart_version: "{{ helm_chart_version }}"
    values:
      crds:
        enabled: true
  run_once: true


#
##
### Testar Instalação do Cert Manager
##
#

- name: Criar namespace para teste
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: cert-manager-test
  run_once: true

- name: Criar Issuer para autoassinatura
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: cert-manager.io/v1
      kind: Issuer
      metadata:
        name: test-selfsigned
        namespace: cert-manager-test
      spec:
        selfSigned: {}
  run_once: true

- name: Criar recurso Certificate
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        name: selfsigned-cert
        namespace: cert-manager-test
      spec:
        dnsNames:
          - example.com
        secretName: selfsigned-cert-tls
        issuerRef:
          name: test-selfsigned
  run_once: true

- name: Verificar status do certificado
  shell: kubectl describe certificate -n cert-manager-test
  register: certificate_status
  failed_when: "'Ready' not in certificate_status.stdout"
  run_once: true

- name: Exibir status do certificado
  debug:
    var: certificate_status.stdout
  run_once: true


#
##
### Limpar recursos usados no teste
##
#

- name: Apagar recurso Certificate
  kubernetes.core.k8s:
    state: absent
    definition:
      apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        name: selfsigned-cert
        namespace: cert-manager-test
  run_once: true

- name: Apagar Issuer para autoassinatura
  kubernetes.core.k8s:
    state: absent
    definition:
      apiVersion: cert-manager.io/v1
      kind: Issuer
      metadata:
        name: test-selfsigned
        namespace: cert-manager-test
  run_once: true

- name: Apagar namespace de teste
  kubernetes.core.k8s:
    state: absent
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: cert-manager-test
  run_once: true


#
##
### Criar Secret Token Cloudflare
##
#

- name: Verificar se a Secret já existe
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    namespace: cert-manager
    name: cf-dns-secret
  register: secret_info
  failed_when: false  # Evita falha se a Secret não existir
  run_once: true

- name: Criar a Secret personalizada
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: cf-dns-secret
        namespace: cert-manager
      data:
        token: "{{ cloudflare_api_token | b64encode }}"  # Valor codificado em Base64
  when: secret_info.resources | length == 0
  run_once: true


#
##
### Configurar Lets Encrypt
##
#

- name: Criar Issuer staging
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: cert-manager.io/v1
      kind: ClusterIssuer
      metadata:
        name: letsencrypt-staging
        namespace: cert-manager
      spec:
        acme:
          server: https://acme-staging-v02.api.letsencrypt.org/directory
          email: "{{ cm_email }}"
          privateKeySecretRef:
            name: letsencrypt-stagin
          solvers:
          - dns01:
              cloudflare:
                apiTokenSecretRef:
                  name: cf-dns-secret
                  key: token
  run_once: true

- name: Configurar wildcart staging
  kubernetes.core.k8s:
    state: present
    definition:          
      apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        name: domain-wildcard-cert-stagin
        namespace: cert-manager
      spec:
        secretName: domain-wildcard-cert
        dnsNames:
        - '{{ domain_name }}'
        - '*.{{ domain_name }}'
        issuerRef:
          name: letsencrypt-stagin
          kind: ClusterIssuer
        usages:
        - digital signature
        - key encipherment
  run_once: true

- name: Criar Issuer prod
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: cert-manager.io/v1
      kind: ClusterIssuer
      metadata:
        name: letsencrypt-prod
        namespace: cert-manager
      spec:
        acme:
          server: https://acme-v02.api.letsencrypt.org/directory
          email: "{{ cm_email }}"
          privateKeySecretRef:
            name: letsencrypt-prod
          solvers:
          - dns01:
              cloudflare:
                apiTokenSecretRef:
                  name: cf-dns-secret
                  key: token
  run_once: true

- name: Configurar wildcart prod
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        name: domain-wildcard-cert
        namespace: cert-manager
      spec:
        secretName: domain-wildcard-cert-prod
        dnsNames:
        - '{{ domain_name }}'
        - '*.{{ domain_name }}'
        issuerRef:
          name: letsencrypt-prod
          kind: ClusterIssuer
        usages:
        - digital signature
        - key encipherment
  run_once: true